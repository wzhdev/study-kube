# Calico Version v3.4.0
# https://docs.projectcalico.org/v3.4/releases#v3.4.0
# This manifest includes the following component versions:
#   calico/node:v3.4.0
#   calico/cni:v3.4.0
#   calico/kube-controllers:v3.4.0

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://192.168.2.20:2379"

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
  # Configure the Calico backend to use.
  calico_backend: "bird"

  # Configure the MTU to use
  veth_mtu: "1440"

  # The CNI network configuration to install on each node.  The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOWZGSzlvTzRkUUZqSFk1Q0xXYVRYNzdjbERDbytZckF2V1JLa3BocFZ0UDBQcWJpCmx6K3FPNEwxbjMva3NmTUZPblh1T3FKYkNwSmJOSDRTZlhJdzNHQklYZnRzRzNpeFNpaVYybldqUDBKcnk4MVEKVEg2a29rZUpmWmtPVEx5YmVLRjBueERQL0pEVEorQ0wvdHhTS3Brb2hBVXVlMGI4T25HTkpXTjNjQlk3UllJSwpTaGl6Rk96djNXN1QxVnhmMitBL01EZFVhV2hxc1FuWEFmUXNEZ2RCZVB6bHl1UWE0N2tUeXVWRVNRdW9HRXVtCnl4Nkh3bnE0WFFMQWl6dThubGJmL3dHYTdWb3AvZTFjOGNjSkdMdWx4OU5SQ1JiWEFZbXZZbTNDUWQ4ZVhGM1MKU3J0YU16aWhkakVFMEVxN2MweDRZTVhuejJ5ZnJEcUQvTFRZa3dJREFRQUJBb0lCQVFEZWFxeWthMUx4WGFQSgpJdEh1UlFtYVdQMGFkemNaRmNaZ2dNWi85SjJ2REZlaUlVSmlEZzFoYkhtOUdPZzFsZFZ3blI0b29KTTg2RWJiCkhmaVN3aVkxNWswTDBVaGZQN0wxb2VhRGZrZDMraFdLWmM3c25zczhodjFzUEhLV0t5dGUySVNqSlkweWw3YWUKSlkvMW1FSW1qQVA4QU1PY2NRSEJ5TmNnck9kaTBMSkdhY1QrWFRLOFNxSm5MYVBnSy9DWDFWZXpTNE1rb0ptagpScDdJaUhvOXAzSFRVMEF2cEZBQVN3Q3I3MnB2cWdwcG5SczM3UExQYVlUcHhQVGowbkJxVGtnNk1MRjRSZ1EyCnNQbnRic3hLYnNVdEdlN0ZUSk5tV0lrbTRyQm05dXM4TkNxZ0ErRW1TV2lVNHhGenFWT1BDdm1uRkFxUVJzMmwKd29SdUt5SEJBb0dCQVBraTZZdEhRNkR3ODNzK3gzOVR3ZjhzQWlaNWcyNWZmQnArMkwwUEtwQWFBY1ZaQ1ZocApORnF0bXgxUy83TDBPTkxOanJCSW1pS0Y3U2tyNHY4eW56TmZTUTlZYlJsUFJIazgrSDJJUURmRzBTYWJ1SzFUCmR6dGlqRHArUS9zU0luckdkOG0zMm4ySkVtdnZsdms3Q1BqY3JWV2FkVGc4dkZUQWJRUWZXckRaQW9HQkFQeTMKMnZ0NkxPd0ZJTllrbzl5R0dKR2lqam1TbUtRNmRPRzVmWXVSamFDT25OOUVwTjkwU3N6YkdvNFF0eVowL2Z1Mwo3d2VHRHU1NFF5Mnl4QlkrZ2hWVUkxbGRlYWlieWY3dVg3Sk93cjdsbTVNMjlVbEQ3R0xJYS9LMVNrZXdZMERVCjE4amUrWWQxemdlazdOaVJkZ3VJUEYvNjFORVNsblJlQmZQbHBiRkxBb0dCQUpEcldBS21mNVpjMHFUOFRidXAKRXczRm9iS1R1SG81bk0wa3dCcXBlYzY4OGc3RHpnWFpuSlNxcTdJUkY2QVhJLzZyaDdiUFpLbDBVaEpDN3hZWApjamZGMDQvVGxoTEU0MFhLeTVqcDZzRUhLNTVUc3NkUDUrbHBWN3ltdWhDUDZmS1ZCQlVZbDBXeXVENkU3Y01vCkxmM2xFQWJkaEJZa2JrQzJkak9Sc1lWeEFvR0FLb04vZWtpK1grSW8rUDFtOTRVemd1UjJ5cWFudVJFQWNxeXkKdXhUOFgyTSticXpzazQ3THVwU3RiZkxQN005SG50MzlmeVdGUTRiRnZsMVJjWENJajYvODFsN01SWm9YckNSTAp3d0pPN3JCUHNMOVJHa2NyOEI1SlVxWSszYnFGcC9WbWE2dGZEUE83ZWp1N2dGOVFIWGFJdVpqSHpuZ3pDVlo3CjUrRGRNK3NDZ1lFQXhsYzRPMzkwV212ZERQNms3bk5WcHZubU9kVUQ5dFlLK2IrdHd1dEs4T1BxakttQyszT08KTmcyQVRNVUJEQlZhVHNYcjR6dlVheERvUHpKekg1dEVIOEhGdjF4SXZ2ZFd5VEpKM2ZtQVUzMkZPNXFpUXN5SgpDTWkvdXBzZ2l3VlQyUzRlbDFhbUhvVHZRd1dZeDdMRDhkdWhUUEQxMmZzK2szeWFYa0xNWDRRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lJUnpLNUl2Vmp3TmN3RFFZSktvWklodmNOQVFFTEJRQXdFakVRTUE0R0ExVUUKQXhNSFpYUmpaQzFqWVRBZUZ3MHhPREV5TVRReE16TXpNVFZhRncweE9URXlNVFF4TXpNek1UVmFNQkV4RHpBTgpCZ05WQkFNVEJtMWhjM1JsY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFh4ClN2YUR1SFVCWXgyT1FpMW1rMSsrM0pRd3FQbUt3TDFrU3BLWWFWYlQ5RDZtNHBjL3FqdUM5WjkvNUxIekJUcDEKN2pxaVd3cVNXelIrRW4xeU1OeGdTRjM3YkJ0NHNVb29sZHAxb3o5Q2E4dk5VRXgrcEtKSGlYMlpEa3k4bTNpaApkSjhRei95UTB5ZmdpLzdjVWlxWktJUUZMbnRHL0RweGpTVmpkM0FXTzBXQ0Nrb1lzeFRzNzkxdTA5VmNYOXZnClB6QTNWR2xvYXJFSjF3SDBMQTRIUVhqODVjcmtHdU81RThybFJFa0xxQmhMcHNzZWg4SjZ1RjBDd0lzN3ZKNVcKMy84Qm11MWFLZjN0WFBISENSaTdwY2ZUVVFrVzF3R0pyMkp0d2tIZkhseGQwa3E3V2pNNG9YWXhCTkJLdTNOTQplR0RGNTg5c242dzZnL3kwMkpNQ0F3RUFBYU50TUdzd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakE2QmdOVkhSRUVNekF4Z2dadFlYTjBaWEtDQ1d4dlkyRnMKYUc5emRJY0V3S2dDRkljRWZ3QUFBWWNRQUFBQUFBQUFBQUFBQUFBQUFBQUFBVEFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQWtVWTZGVWZmc2VrelYrTmU1LzFDRnNFSlB4b3lGaTdkV2JwdTk4ODFSSTlsS25FNXB0cGlhbXpGCmVsOVRqVXp4aitrYVlsK1VxVmxHRWEzR2ovcVFDaVNESTZLUGNaVVJzVWJaRHdPaHRXcjg0RkNPa0N5eHpzRGwKdFh1SWRtTXdJYlR4YUdUQnJYS3ExaC82WVZNNWVVTnNnUHVadEpBWEVKYTR1cENBU3prVmt2YWYyaFRJd05iWgpqL3RYdjhTUVZaQkhEMnc4UDEzWnQzbTczbmdJK0p5N1VlOUtFVy9EcCthdVJmbmN3L2d1aFR1NjVRRDVJS3U1ClA3V1hXWnpKanBNWmJwdVBjUXJ3VTFhcGk3OFBEZWMvOE1pUW96elR2VUp3b2ZFSXBUdzQ4TVpqeWlOR0xxeDUKSWdlalZQQmFpd3FRcVovV1lJenROZXlEZTFqMDZRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN3akNDQWFxZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkbGRHTmsKTFdOaE1CNFhEVEU0TVRJeE5ERXpNek14TlZvWERUSTRNVEl4TVRFek16TXhOVm93RWpFUU1BNEdBMVVFQXhNSApaWFJqWkMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1oN3EydmxJZkF1CitpTWhFQTJoQjR3cGg1Y3VFSmNtMkc5M3A1QWZRY3I1a2NWSHEwcDhNczhhMS9jeklDdlVXVzBhek85K241NDEKVUJrbE1Sbzl1RDVIVWRxYjRjcjJzemVqaHQ0WGtuZlJsc1BFOU1IdS9VUGtEL3Biemx6QjNyUjQ4THRWM3U2SgpNd2tCenlSUkh3UllSUnUvamgweENTbUdDTDVNQTJkQjVkZGd6eUJOeGdzZUtLMUZOaE5qRXhFazlTa2VkRElpCitzZW9qOHU5dmNtbkh5Y1hCREthUVFSZ3JKeTZDc3Rta2JFK2w5UmkwVGtHT21UYXowZ1B6M1laeWlMK3lvK2cKdnY4Qmx6eGgrekhFUTZRUWhTZUN2M3FwYlI3WDBYK2puWHlkVUFoMlF1NW1UeUpHRnlPOHdld3d0R3ZPbm41ZQptMVU3WGhPWklOc0NBd0VBQWFNak1DRXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTVBXYnB1bG1pR1E0VmowTEt4TVR5Rm93MlZNK0orUWc0T00KYjByS09VK0RNWnE0MEhYZS8rNVR4WTY2ZytBa2NTUVNsMGh0UkhjbHhxV0F3WmZNOFFkbzgyZ2ZHc0g3WUNCOQo2c3YxZkJkTkdxZVlySzh1alVmODVaY2N1TU5jeExDMUdWa1pzSllwYmF3TkRCNmdIZE5TcWttTDViSlFkNmtYCitPV01HbzBMMDJUSU9yZ3RVUEgrWEFGdXB2WHY3Ym5mVS8wZVA2ajdPU2JsM1FPbm1IaklOVzBnNXZ4OHVsKzUKZWtucHFSYnhkOTc1RUdpMlFvT2kzZmJ2Ull6Unplc24zVkx2MFV2QnNURnJSN3o1TWVYaGlDdGFlNnBtQ2xEbQpUTks2ZVM3Y0xiQ3ZFOEpkTXpPdmFaSHNOeTRlclFRWjFhMkZ3K0ZyQ2tVc01pbnUwSzQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K

---
# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      initContainers:
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v3.4.0
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.4.0
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "10.244.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
              host: localhost
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -bird-ready
              - -felix-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v3.4.0
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system
---

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system
---


